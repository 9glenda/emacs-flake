#+TITLE: GNU Emacs Configuration

* TODO
- [ ] backup file location
* Base settings
#+begin_src emacs-lisp :tangle early-init.el
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src



* Base settings
#+begin_src emacs-lisp :tangle yes
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

** Startup time
Show the startup time.
#+begin_src emacs-lisp :tangle early-init.el
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Loaded Emacs in %.03fs"
                     (float-time (time-subtract after-init-time before-init-time)))))
#+end_src
*** Performance boost


#+begin_src emacs-lisp :tangle yes
(let ((normal-gc-cons-threshold gc-cons-threshold)
      (normal-gc-cons-percentage gc-cons-percentage)
      (normal-file-name-handler-alist file-name-handler-alist)
      (init-gc-cons-threshold most-positive-fixnum)
      (init-gc-cons-percentage 0.6))
  (setq gc-cons-threshold init-gc-cons-threshold
        gc-cons-percentage init-gc-cons-percentage
        file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold ,normal-gc-cons-threshold
                     gc-cons-percentage ,normal-gc-cons-percentage
                     file-name-handler-alist ',normal-file-name-handler-alist))))
#+end_src


*** use-package
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (require 'use-package))

(eval-and-compile
  (defun use-package-ensure-ignore (&rest _args) t)
  (setq use-package-ensure-function #'use-package-ensure-ignore)

  (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil))

(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq inhibit-default-init t)
(setq initial-major-mode 'fundamental-mode)
#+end_src

** Nix

#+begin_src emacs-lisp :tangle yes
(setq package-enable-at-startup nil)
#+end_src


Provide a location where Emacs can store data and cache.
#+begin_src emacs-lisp :tangle yes
;;  (eval-and-compile
;;    (defvar data-dir
;;      (if (getenv "XDG_DATA_HOME")
;;	  (concat (getenv "XDG_DATA_HOME") "/emacs/")
;;	(expand-file-name "~/.local/share/emacs/"))
;;      "Directory for data.")
;;
;;    (defvar cache-dir
;;      (if (getenv "XDG_CACHE_HOME")
;;	  (concat (getenv "XDG_CACHE_HOME") "/emacs/")
;;	(expand-file-name "~/.cache/emacs/"))
;;      "Directory for cache."))

(setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
#+end_src


*** Theme
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes         
    :ensure t)
#+end_src
Mark the theme as safe and load it.
#+begin_src emacs-lisp :tangle yes
  (custom-set-variables
    '(custom-safe-themes
      '("88f7ee5594021c60a4a6a1c275614103de8c1435d6d08cc58882f920e0cec65e"
	default)))
(load-theme 'doom-one)
#+end_src

** org-mode
*** Style
**** Heading size                                                          
#+begin_src emacs-lisp :tangle yes                                         
(custom-set-faces                                                          
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))                    
  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))                    
  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))                    
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))                    
  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))                    
)
#+end_src                                                                  
                                                                           
**** ox-reveal                                                             
#+begin_src emacs-lisp :tangle yes                                         
(use-package ox-reveal :ensure t)                                          
#+end_src

**** Modern-org
TODO: Should be replaced by prettyfy symbol mode.
#+begin_src emacs-lisp :tangle yes
(use-package org-modern :ensure t)
#+end_src

*** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam :ensure t)
#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit :ensure t)
#+end_src


** Quality of life
*** TODO
- [ ] Hex color
*** Rainbow delimiters
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :hook (emacs-lisp-mode . rainbow-delimiters-mode))
  ;; for other languages like closure this could also be enabled.
#+end_src

** RE-builder
A interactive regex builder.
re-builder is build in to emacs. We want an more up to date re-builder tho an
** Editorconfig
#+begin_src emacs-lisp :tangle yes
    (use-package editorconfig
      :ensure t
      :defer 1
      :commands
      (editorconfig-mode)
      :init
      (setq editorconfig-trim-whitespaces-mode 'ws-butler-mode)
      (setq editorconfig-exclude-modes '(
    ;; emacs-lisp-mode
					 ;; lisp-mode
					 org-mode
  ))
      :config
      (cl-pushnew '(plantuml-mode plantuml-indent-level) editorconfig-indentation-alist :test #'equal)
      (editorconfig-mode 1))
#+end_src
** Evil mode

*** Tasks [1/3]
- [X] undo
- [ ] evil-commlection
- [ ] org mode stuff
  #+begin_src emacs-lisp :tange yes

;; (use-package evil-goggles
;;              :ensure t
;;             :hook (after-init-hook . evil-goggles-mode)
;;     :config
;; 
;;     (custom-set-faces
;;      '(evil-goggles-default-face ((t (:inherit 'highlight)))))
;;         (setq evil-goggles-duration 1)
;;             )
  #+end_src
#+begin_src emacs-lisp :tangle yes
  (use-package undo-fu
  :ensure t)
    (use-package evil
      :ensure t
      :hook (after-init-hook . evil-mode)
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-undo-system 'undo-fu)
      )

    (use-package evil-collection
      :ensure t
      :hook (after-init-hook . evil-collection-init)
      :after evil)
#+end_src

*** clipboard
TODO: shift select
TODO: fix kill ring is empty
#+begin_src emacs-lisp :tangle yes
      (setq select-enable-clipboard nil)

  (defun preserve-clipboard (input-function) "executes the function but preserves the clipboard"
    (let ((old-c (current-kill 0 t)))
      (funcall input-function)
      (cp old-c)))

    (defun cp (text) "Copy TEXT to the clipboard." (when text (kill-new text)))
          (defun paste-from-clipboard ()
            (interactive)

  (preserve-clipboard 
  (lambda () 
            (setq select-enable-clipboard t)
            (yank)
            (setq select-enable-clipboard nil))))

        (defun copy-to-clipboard()
          (interactive)
  (preserve-clipboard 
  (lambda () 
          (setq select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq select-enable-clipboard nil)
  ))
      )

        (global-set-key (kbd "C-S-v") 'paste-from-clipboard)
        (global-set-key (kbd "C-S-c") 'copy-to-clipboard)

        ;; (global-set-key (kbd "C-S-<drag-mouse-1>") 'copy-to-clipboard)
        ;; (global-set-key (kbd "S-<drag-mouse-1>") 'copy-to-clipboard)
        ;; (global-set-key (kbd "C-<drag-mouse-1>") 'copy-to-clipboard)



#+end_src
*** ESC C-g                                                 
I'm way to used to pressing escape from vim.                
#+begin_src emacs-lisp :tangle yes                          
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)   
#+end_src


*** Ivy
TODO: vertico???

*** Vertico                                                                                                    
Vertico is a minimal ivy alternative.
#+begin_src emacs-lisp :tangle yes                                                                             
;; 		   (use-package vertico
;; 		   :ensure t
;; 		 :hook (after-init-hook . vertico-mode)
;; 		   )
;; 			   (use-package savehist                                                                                
;; 			 :hook (after-init-hook . savehist-mode)                                                                
;; 			    )                                                                                                   
;; 
;; 		       ;; (use-package marginalia                                                                                 
;; 		       ;;   :after vertico                                                                                        
;; 		       ;;   :ensure t                                                                                             
;; 		       ;;   :hook (after-init-hook . marginalia-mode)                                                             
;; 		       ;;   :custom                                                                                               
;; 		       ;; (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))                  
;; 		       ;; )                                                                                                       
;; 		   (use-package marginalia                                                                                        
;; 		     :ensure t                                                                                                    
;; 		     :defer 2                                                                                                     
;; 		     :commands                                                                                                    
;; 		     (marginalia-mode)                                                                                            
;; 		     :config                                                                                                      
;; 		     (marginalia-mode 1))
;; 
;;        (eval-when-compile
;;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;;   (add-to-list 'completion-at-point-functions #'cape-file)
;;   (add-to-list 'completion-at-point-functions #'cape-elisp-block)
;;   )
;; 
;; 		 (use-package corfu 
;; 		     :ensure t
;; 			 :hook (after-init-hook . global-corfu-mode)                                                                
;;       :custom
;; 
;; 	       (corfu-auto t)
;; 
;; 
;; 		 )
;; 		     ;; corfu-quit-no-match 'separator) ;; or t
;;       (use-package cape :ensure t)
;; 
;; 
;; 	       (global-set-key (kbd "C-<tab>") 'completion-at-point)
;; 	 ;; TAB cycle if there are only few candidates
;;        (setq completion-cycle-threshold 3)
;; 
;;        ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
;;        ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
;;        ;; (setq read-extended-command-predicate
;;        ;;       #'command-completion-default-include-p)
;; 
;;        ;; Enable indentation+completion using the TAB key.
;;        ;; `completion-at-point' is often bound to M-TAB.
;;        (setq tab-always-indent 'complete)
;;       (eval-when-compile ;;       (setq completion-at-point-functions (list (cape-capf-debug #'cape-dict))) ;;       )
#+end_src

#+begin_src emacs-lisp :tangle yes
	    (use-package ivy
	       :hook (after-init-hook . ivy-mode)
	      :ensure t)


	  (use-package counsel
	    :ensure t
	    :after ivy
	    :hook (after-init-hook . counsel-mode)
	    :config 
	      (setq ivy-initial-inputs-alist nil))

	;; remap M-x to counsel-M-x 


    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
(global-set-key "\C-s" 'swiper)
#+end_src

*** Which key

#+begin_src emacs-lisp :tangle yes
   (use-package which-key
     :ensure t
     :hook (after-init-hook . which-key-mode))
#+end_src

** LSP

#+begin_src emacs-lisp :tangle yes
	(eval-and-compile (setq lsp-keymap-prefix "C-c l"))
	(use-package lsp-mode
	  :ensure t
	  :commands (lsp lsp-deferred))

;;  (eval-and-compile
;;  (defun lsp-mode-setup ()
;;  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols)) (lsp-headerline-breadcrumb-mode)))

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode))

(use-package lsp-ivy
  :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle yes
  ;; (use-package command-log :ensure t)
#+end_src

Company provied the ui for completion. Company-box improves up on this ui.
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind
    (:map company-active-map ("<return>" . company-complete-selection))

    (:map company-active-map ("C-e" . company-abort))

    (:map company-active-map ("<tab>" . company-select-next))
    (:map company-active-map ("<C-j>" . company-select-next))

    (:map company-active-map ("<backtab>" . company-select-previous))
    (:map company-active-map ("<C-k>" . company-select-previous))

    ;; (:map lsp-mode-map ("<return>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 0)
    (company-idle-delay 0.0))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :ensure t
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src


*** Nix

#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")
#+end_src

*** Haskell 

#+begin_src emacs-lisp :tangle yes
(use-package lsp-haskell
    :ensure t)
#+end_src

*** Ocaml

#+begin_src emacs-lisp :tangle yes
(use-package tuareg
    :ensure t)
#+end_src


*** coq

#+begin_src emacs-lisp :tangle yes
  (use-package proof-general
    :no-require t
    :ensure t)

  (use-package company-coq 
    ;; :no-require t
    ;; :hook (coq-mode . coq-company-mode)
    :ensure t)
#+end_src

** Shell modes
TODO

** Keep folders clean

#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist `(("." . ,(expand-file-name "/tmp/emacs"))))

  ;; (setq make-backup-files nil)

  (setq auto-save-list-file-prefix (expand-file-name "/tmp/emacs/sessions/")
      auto-save-file-name-transforms `((".*" ,(expand-file-name "/tmp/emacs/auto-saves/") t)))
#+end_src
