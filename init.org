#+TITLE: Emacs Config
#+AUTHOR: 9glenda

* early-init.el
#+begin_src emacs-lisp :tangle early-init.el
;; -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)
(setq package-enable-at-startup nil)
#+end_src

* init.el
;;; init.el ---  -*- lexical-binding: t; no-byte-compile: t -*-
#+begin_src emacs-lisp :tangle yes
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

* Startup
** GC
#+begin_src emacs-lisp :tangle yes
(use-package gcmh
  :ensure t
  :commands (gcmh-mode)
  :demand t
  :config
  (gcmh-mode 1))
#+end_src
** Startup time
#+begin_src emacs-lisp :tangle yes
(defun display-startup-time ()
  (message
   "Emacs loaded in %s with %d garbage collections."
   (format
    "%.2f seconds"
    (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done))
(add-hook 'emacs-startup-hook #'display-startup-time)
#+end_src
** No welcome screen
#+begin_src emacs-lisp :tangle yes
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+end_src
** Menu bar
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Font
#+begin_src emacs-lisp :tangle yes
;; (set-face-attribute 'default nil :family "Iosevka")
;; (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")
#+end_src

** Keep folders clean
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist `(("." . ,(expand-file-name "/tmp/emacs"))))
(setq auto-save-list-file-prefix (expand-file-name "/tmp/emacs/sessions/")
   auto-save-file-name-transforms `((".*" ,(expand-file-name "/tmp/emacs/auto-saves/") t)))
(setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/tmp/emacs/lock/\\1" t)))
#+end_src

*** Cache
#+begin_src emacs-lisp :tangle yes
(setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
#+end_src
* use-package
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
(require 'use-package))

(eval-and-compile
  (defun use-package-ensure-ignore (&rest _args) t)
  (setq use-package-ensure-function #'use-package-ensure-ignore)

  ;; (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil))

(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))

#+end_src

* Visuals
=modus-operandi= is a light theme.
#+begin_src emacs-lisp :tangle yes
(use-package adwaita-dark-theme
 :ensure t
 :config
 (load-theme 'adwaita-dark t))

;; (use-package nano-theme
;;   :ensure t
;;   :commands (nano-ligh nano-dark
;; )
;; )

;; (load-theme 'modus-vivendi-tritanopia)
;; (load-theme 'modus-operandi)
#+end_src
** Modeline 
#+begin_src emacs-lisp :tangle yes
(use-package mood-line
  :ensure t
  :commands (mood-line-mode)
  :config
  (mood-line-mode)
  :custom
  (mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src

** Line numbers
#+begin_src emacs-lisp :tangle yes
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		vterm-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Emacs Frame
#+begin_src emacs-lisp :tangle yes
(modify-all-frames-parameters
 '((right-divider-width . 20)
   (internal-border-width . 20)))

(dolist (face '(window-divider
		window-divider-first-pixel
		window-divider-last-pixel))

  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
#+end_src

* Keybindings
** Evil
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :ensure t
  :demand t
  :init
  (setq evil-want-integration t)
  (progn
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-keybinding nil))
  :commands (evil-mode evil-global-set-key evil-previous-visual-line evil-visual-line evil-next-visual-line evil-ex evil-visual-char evil-define-key evil-execute-macro)
  :config
  (evil-mode 1)

  (setq evil-want-fine-undo t)

  ;; Keybindings for evilnc
  (define-key evil-normal-state-map (kbd "g c") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-visual-state-map (kbd "g c") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-motion-state-map (kbd "g c") 'evilnc-comment-or-uncomment-lines)
)
#+end_src
**** evil-collection
The warning can be ignored
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :ensure t
  :demand t
  :after evil
  :commands (evil-collection-init)
  :config
  (evil-collection-init)
)
#+end_src
**** Undo Tree
=C-x u= gives you a really nice tree view of your undo history.
This is so useful. I often mess up my undo history which is not possibe anymore with =und-tree=.
#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :ensure t
  :demand t
  :commands (global-undo-tree-mode)
  :config
  (global-undo-tree-mode)
  (setq undo-tree-history-directory-alist '(("." . "/tmp/emacs/undo-tree"))))
#+end_src

**** Evil Commenter
#+begin_src emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :ensure t
  :after evil
  :commands (evilnc-default-hotkeys)
  :config
  (evilnc-default-hotkeys)
)
#+end_src

**** Drag stuff
#+begin_src emacs-lisp :tangle yes
(use-package visual-regexp-steroids
  :ensure t)

(use-package evil-visualstar
  :ensure t)

#+end_src

** General keybindings
**** which-key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :ensure t
  :commands (which-key-mode)
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1)
)
#+end_src
**** Eval to kill ring
#+begin_src emacs-lisp :tangle yes
(defun eval-to-kill-ring ()
  (interactive)
  (kill-new (with-output-to-string (princ (call-interactively 'eval-expression)))))

(global-set-key (kbd "C-;") 'eval-to-kill-ring)
#+end_src


**** Clipboard
BUGS: if system clipboard is empty kill ring will be used.
Custom elisp function for C-S-v pasting.
#+begin_src emacs-lisp :tangle yes
(setq select-enable-clipboard nil)

(defun preserve-clipboard (input-function)
  "Executes the function but preserves the clipboard."
  (let ((old-c (when (> (length kill-ring) 0) (car kill-ring))))
    (funcall input-function)
    (when old-c (kill-new old-c))))

(defun copy-to-clipboard ()
  "Copy the selected region to the clipboard."
  (interactive)
  (preserve-clipboard
   (lambda ()
     (setq select-enable-clipboard t)
     (kill-ring-save (region-beginning) (region-end))
     (setq select-enable-clipboard nil))))

(defun paste-from-clipboard ()
  "Paste from the clipboard."
  (interactive)
  (preserve-clipboard
   (lambda ()
     (setq select-enable-clipboard t)
     ;; simulate vim behaviour.
   (if
    (and (eq evil-state 'normal) (= (current-column) 0))
      (progn  
        (goto-char (+ (point) 1))
        (yank)
        (goto-char (- (point) 1)))
      (yank))
     (setq select-enable-clipboard nil))))

(global-set-key (kbd "C-S-v") 'paste-from-clipboard)
(global-set-key (kbd "C-S-c") 'copy-to-clipboard)
#+end_src

* Completion
** Corfu
#+begin_src emacs-lisp :tangle yes
(use-package corfu
  :ensure t
  :commands (global-corfu-mode  corfu-popupinfo-mode)
  :bind
  (:map corfu-map 
   ;; ("SPC" . corfu-insert-separator)
  ("<tab>" . corfu-next)
  ("<backtab>" . corfu-previous)
  ("<return>" . corfu-insert)
  ("C-j" . corfu-next)
  ("C-k" . corfu-previous)
  ("C-e" . corfu-quit))

  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-auto-delay 0.01)
  (corfu-auto-prefix 0)
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;         (shell-mode . corfu-mode)
  ;;         (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  (corfu-popupinfo-mode)
  (global-corfu-mode))
#+end_src

** Emacs 
#+begin_src  emacs-lisp :tangle yes
(use-package emacs
  :init
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; corfu

  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; vertico
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  ;; (defun crm-indicator (args)
  ;;   (cons (format "[CRM%s] %s"
  ;;                 (replace-regexp-in-string
  ;;                  "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
  ;;                  crm-separator)
  ;;                 (car args))
  ;;         (cdr args)))
  ;; (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
)
#+end_src
** Vertico
**** TODO copy selected item 
#+begin_src emacs-lisp :tangle yes
(use-package vertico
  :ensure t
  :commands (vertico-mode)
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("ESC" . vertico-exit)
         ("C-x" . vertico-save)
         :map minibuffer-local-map
         ("C-w" . backward-kill-word))
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t))
#+end_src
**** History
#+begin_src emacs-lisp :tangle yes
(use-package savehist
  :commands (savehist-mode)
  :init
  (savehist-mode))
#+end_src
** TODO Embark
** Marginalia
Add extra information to minibuffer commands.
#+begin_src emacs-lisp :tangle yes
(use-package marginalia
  :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :commands (marginalia-mode)
  :init
  (marginalia-mode))
#+end_src
** Orderless
Regexp match completions.
#+begin_src emacs-lisp :tangle yes
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Consult
#+begin_src emacs-lisp :tangle yes
(use-package consult
  :ensure t)
#+end_src

* Misc
** Helpful
#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :ensure t)
#+end_src


* Project managment/Git
*** Pojectile
#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-dired)
  :config (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; set the project dir to ~/prjects
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  ;; open dired when switching the project
  (setq projectile-switch-project-action #'projectile-dired))
  #+end_src
*** Magit
#+begin_src emacs-lisp :tangle yes
(defun wait-for-buffer-deletion (buffer-name)
  "Wait until the buffer with BUFFER-NAME is deleted."
  (while (and (get-buffer buffer-name) (buffer-live-p (get-buffer buffer-name)))
    (sleep-for 1))  ; Sleep for 1 second, adjust as needed
  (message "Buffer %s deleted." buffer-name))

(defun unlock-gpg () "run echo 1 | gpg -s inside term to unlock to gpg key."
   (interactive)
   (with-temp-file "/tmp/emacs-gpg-script"
    (insert "#!/usr/bin/env bash
{ echo 1 | gpg -s; } && exit 0")
    (ansi-term "/var/run/current-system/sw/bin/bash -i /tmp/emacs-gpg-script" "*gpg-pinentry*")
   (wait-for-buffer-deletion "*gpg-pinentry*")
    (delete-file "/tmp/emacs-gpg-script")))

(use-package magit
  :ensure t
  :commands (magit-run-git-with-editor magit-toplevel magit-commit-assert magit-commit-arguments)
  :config
;;;###autoload
(defun magit-commit-create (&optional args)
  "[CUSTOM] Create a new commit on HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.
\n(git commit [--amend] ARGS)"
  (interactive (if current-prefix-arg
                   (list (cons "--amend" (magit-commit-arguments)))
                 (list (magit-commit-arguments))))
  (cond ((member "--all" args)
         (setq this-command 'magit-commit--all))
        ((member "--allow-empty" args)
         (setq this-command 'magit-commit--allow-empty)))
  (when (setq args (magit-commit-assert args))
    (let ((default-directory (magit-toplevel)))
      (progn ;; custom
        (unlock-gpg) ;; custom
        (magit-run-git-with-editor "commit" args)))))
)
(use-package transient
  :ensure t)
#+end_src
**** gpg

#+begin_src emacs-lisp :tangle yes



#+end_src
* UX
*** Evil Googles
Highlight yanked/pasted text. 
#+begin_src emacs-lisp :tangle yes
(use-package evil-goggles
  :ensure t
  :demand t
  :commands (evil-goggles-mode evil-goggles-use-diff-faces)
  :config
  (evil-goggles-mode)
  (setq 
  evil-goggles-async-duration 1
  evil-goggles-blocking-duration 0) ;; disable blocking
  (evil-goggles-use-diff-faces)
)
#+end_src
*** Scrolling
Scroll line by line.
#+begin_src emacs-lisp :tangle yes
(setq scroll-conservatively 100)
#+end_src
*** Parens
**** Auto close
#+begin_src emacs-lisp :tangle yes
(electric-pair-mode)
(electric-quote-mode)
(electric-indent-mode)
#+end_src
**** Rainbow delimiters
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :ensure t
  :demand t
  :commands (rainbow-delimiters-mode)
  :init (rainbow-delimiters-mode)
)
#+end_src
*** Confirmation prompts
Use =y= / =n= instead of =yes= / =no.=
#+begin_src emacs-lisp :tangle yes
(setq confirm-kill-emacs #'y-or-n-p)
(fset #'yes-or-no-p #'y-or-n-p)
#+end_src


* Terminal
** Vterm
#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :ensure t
  :init
  (setq vterm-max-scrollback 100000))
#+end_src
*** Vterm toggle
#+begin_src emacs-lisp :tangle yes
(use-package vterm-toggle
  :after evil
  :ensure t
  :bind*
    (("C-t" . vterm-toggle))
  :init
  (setq
   vterm-toggle-fullscreen-p t))
#+end_src
** Ansi term
#+begin_src emacs-lisp :tangle yes
(defvar my-term-shell "/run/current-system/sw/bin/bash")
#+end_src
** Kill buffer on exit
#+begin_src emacs-lisp :tangle yes
(defun my-term-handle-exit (&optional process-name msg)
  (message "%s | %s" process-name msg)
  (kill-buffer (current-buffer)))
(advice-add 'term-handle-exit :after 'my-term-handle-exit)
#+end_src

* Debugging
#+begin_src emacs-lisp :tangle yes
(use-package command-log-mode
  :ensure t)
#+end_src


* Org Mode
** Latest Org Mode Package
Pulling the latest version on org mode to make sure it’s always up to date/
#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure t
  :config
  (setq
   org-src-preserve-indentation nil
   org-edit-src-content-indentation 0
   org-auto-align-tags nil
   org-tags-column 0
   org-fold-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t)

#+end_src

*** Org agenda
My org roam daily notes are part of org agenda. This enables task managment inside org roam dialies.
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files (append '("~/RoamNotes/daily") org-agenda-files))
#+end_src

#+begin_src emacs-lisp :tangle yes
   ;; visuals
   (setq
   org-pretty-entities t
   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "⤵"
   ;; ⤵ ▼ ⬎    ▾ …

   org-src-fontify-natively t ;; Syntax highlighting in org src blocks
))
#+end_src

** Org roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/RoamNotes")
  :commands (org-roam-db-autosync-enable)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n d" . org-roam-dailies-goto-today)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  (org-roam-db-autosync-enable))
#+end_src
** Org Babel
Org Babel is used to execute/evaluate org source blocks.
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
  'org-babel-load-languages
  '(
    (emacs-lisp . t)
    (haskell . t)
    (julia . t)
    (ocaml . t)
    (latex . t)
    (shell . t)
    (calc . t)
))

(setq org-confirm-babel-evaluate nil)
#+end_src

** Org Superstar
Org Superstar replaces the =*= in Headings with a nice Unicode Symbol.
#+begin_src emacs-lisp :tangle yes
(use-package org-superstar
  :ensure t
  :hook (org-mode-hook . org-superstar-mode)
  :config
  (setq
   org-superstar-leading-bullet " "
   org-superstar-special-todo-items t
   org-superstar-todo-bullet-alist '(
      ("TODO" . 9744)
      ("FIXME" . 9744)
      ("DISABLED" . 9744) ;; For init.el
      ("DONE" . 9745))
   )
)
#+end_src

** Evil Org
#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode-hook . evil-org-mode)
)

#+end_src
** DISABLED org-modern

Make org mode look way more modern. This is another awesome package by minad. 
An alternative worth taking a look at is [[https://github.com/rougier/svg-tag-mode][svg-tag-mode]].
The main advantage of org-modern is it not using images for the prettifying.
#+begin_src emacs-lisp :tangle no
(use-package org-modern
  :ensure t
  :hook (org-mode-hook . org-modern-mode)
  :config
  (setq
   ;; org-modern-star '("●" "○" "✸" "✿")
   org-modern-star '( "⌾" "✸" "◈" "◇")
   org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
   org-modern-tag nil
   org-modern-priority nil
   org-modern-todo nil
   org-modern-table nil))
#+end_src


* LSP
** LSP mode
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :ensure t
  :init
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(flex))) ;; Configure flex  (setq lsp-keymap-prefix "C-c l") 
  :config
  (lsp-enable-which-key-integration t)
  :commands (lsp lsp-deferred lsp-enable-which-key-integration)
  :custom
  (lsp-completion-provider :none) ;; use corfu
  :hook
  (prog-mode . lsp)
  (lsp-completion-mode . my/lsp-mode-setup-completion))
#+end_src
** LSP UI
#+begin_src emacs-lisp :tangle yes
(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode))
#+end_src
** Langs
*** Ocaml
#+begin_src emacs-lisp :tangle yes
(use-package tuareg
  :mode "\\.ml\\'"
  :ensure t)
  #+end_src
*** Rust
#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :mode "\\.rs\\'"
  :ensure t)
  #+end_src

*** Nix
#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
  :mode "\\.nix\\'"
  :ensure t)
#+end_src

*** Julia
#+begin_src emacs-lisp :tangle yes
(use-package lsp-julia
  :ensure t
  :mode "\\.jl\\'"
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.9"))
#+end_src

*** Haskell
#+begin_src emacs-lisp :tangle yes
(use-package lsp-haskell
  :ensure t
  :mode "\\.hs\\'"
  :config
  (setq lsp-haskell-server-path "haskell-language-server"))


(use-package haskell-mode
  :ensure t
  :mode "\\.hs\\'")
#+end_src

* Nix
** nix3.el
#+begin_src emacs-lisp :tangle yes
(use-package nix3
  :ensure t)
#+end_src
*** Magit nix
#+begin_src emacs-lisp :tangle yes
(use-package magit-nix3
  :ensure t)
#+end_src

*** twist.el
#+begin_src emacs-lisp :tangle yes
(use-package twist
  :ensure t)
#+end_src


* Keybingings
=M-:= eval-expression
=C-c C-x C-l=: LaTeX preview
