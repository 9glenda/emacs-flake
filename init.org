#+TITLE: GNU Emacs Configuration

* Base settings
#+begin_src emacs-lisp :tangle early-init.el
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

* Base settings
#+begin_src emacs-lisp :tangle yes
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

** Startup time
Show the startup time.
#+begin_src emacs-lisp :tangle early-init.el
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Loaded Emacs in %.03fs"
                     (float-time (time-subtract after-init-time before-init-time)))))
#+end_src
*** Performance boost


#+begin_src emacs-lisp :tangle yes
(let ((normal-gc-cons-threshold gc-cons-threshold)
      (normal-gc-cons-percentage gc-cons-percentage)
      (normal-file-name-handler-alist file-name-handler-alist)
      (init-gc-cons-threshold most-positive-fixnum)
      (init-gc-cons-percentage 0.6))
  (setq gc-cons-threshold init-gc-cons-threshold
        gc-cons-percentage init-gc-cons-percentage
        file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold ,normal-gc-cons-threshold
                     gc-cons-percentage ,normal-gc-cons-percentage
                     file-name-handler-alist ',normal-file-name-handler-alist))))
#+end_src


*** use-package
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (require 'use-package))

(eval-and-compile
  (defun use-package-ensure-ignore (&rest _args) t)
  (setq use-package-ensure-function #'use-package-ensure-ignore)

  (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil))

(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq inhibit-default-init t)
(setq initial-major-mode 'fundamental-mode)
#+end_src

** Nix

#+begin_src emacs-lisp :tangle yes
(setq package-enable-at-startup nil)
#+end_src


Provide a location where Emacs can store data and cache.
#+begin_src emacs-lisp :tangle yes
(eval-and-compile
  (defvar data-dir
    (if (getenv "XDG_DATA_HOME")
        (concat (getenv "XDG_DATA_HOME") "/emacs/")
      (expand-file-name "~/.local/share/emacs/"))
    "Directory for data.")

  (defvar cache-dir
    (if (getenv "XDG_CACHE_HOME")
        (concat (getenv "XDG_CACHE_HOME") "/emacs/")
      (expand-file-name "~/.cache/emacs/"))
    "Directory for cache."))
#+end_src


*** Theme
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes         
    :ensure t)                     



#+end_src
Mark the theme as safe and load it.
#+begin_src emacs-lisp :tangle yes
  (custom-set-variables
    '(custom-safe-themes
      '("88f7ee5594021c60a4a6a1c275614103de8c1435d6d08cc58882f920e0cec65e"
	default))
)

    (load-theme 'doom-one)
#+end_src

** org-mode
*** Style
**** Heading size                                                          
#+begin_src emacs-lisp :tangle yes                                         
(custom-set-faces                                                          
  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))                    
  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))                    
  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))                    
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))                    
  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))                    
)
#+end_src                                                                  
                                                                           
**** ox-reveal                                                             
#+begin_src emacs-lisp :tangle yes                                         
(use-package ox-reveal :ensure t)                                          
#+end_src
**** Modern-org
TODO: Should be replaced by prettyfy symbol mode.
#+begin_src emacs-lisp :tangle yes
(use-package org-modern :ensure t)
#+end_src

*** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam :ensure t)
#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit :ensure t)
#+end_src


** Evil mode

*** Tasks [1/3]
- [X] undo
- [ ] evil-commlection
- [ ] org mode stuff
  #+begin_src emacs-lisp :tange yes

;; (use-package evil-goggles
;;              :ensure t
;;             :hook (after-init-hook . evil-goggles-mode)
;;     :config
;; 
;;     (custom-set-faces
;;      '(evil-goggles-default-face ((t (:inherit 'highlight)))))
;;         (setq evil-goggles-duration 1)
;;             )
  #+end_src
#+begin_src emacs-lisp :tangle yes
  (use-package undo-fu
  :ensure t)
    (use-package evil
      :ensure t
      :hook (after-init-hook . evil-mode)
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-undo-system 'undo-fu)
      )

    (use-package evil-collection
      :ensure t
      :hook (after-init-hook . evil-collection-init)
      :after evil
      :config
      )
#+end_src

*** clipboard
TODO: shift select
TODO: fix kill ring is empty
#+begin_src emacs-lisp :tangle yes
      (setq select-enable-clipboard nil)

  (defun preserve-clipboard (input-function) "executes the function but preserves the clipboard"
    (let ((old-c (current-kill 0 t)))
      (funcall input-function)
      (cp old-c)))

    (defun cp (text) "Copy TEXT to the clipboard." (when text (kill-new text)))
          (defun paste-from-clipboard ()
            (interactive)

  (preserve-clipboard 
  (lambda () 
            (setq select-enable-clipboard t)
            (yank)
            (setq select-enable-clipboard nil))))

        (defun copy-to-clipboard()
          (interactive)
  (preserve-clipboard 
  (lambda () 
          (setq select-enable-clipboard t)
          (kill-ring-save (region-beginning) (region-end))
          (setq select-enable-clipboard nil)
  ))
      )

        (global-set-key (kbd "C-S-v") 'paste-from-clipboard)
        (global-set-key (kbd "C-S-c") 'copy-to-clipboard)

        ;; (global-set-key (kbd "C-S-<drag-mouse-1>") 'copy-to-clipboard)
        ;; (global-set-key (kbd "S-<drag-mouse-1>") 'copy-to-clipboard)
        ;; (global-set-key (kbd "C-<drag-mouse-1>") 'copy-to-clipboard)



#+end_src
*** ESC C-g                                                 
I'm way to used to pressing escape from vim.                
#+begin_src emacs-lisp :tangle yes                          
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)   
#+end_src


*** Ivy
TODO: vertico???


#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :ensure t
    :diminish
    :hook (after-init-hook . ivy-mode)
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill)))
#+end_src

*** Which key

#+begin_src emacs-lisp :tangle yes
   (use-package which-key
     :ensure t
     :hook (after-init-hook . which-key-mode)
   )
#+end_src

** LSP

#+begin_src emacs-lisp :tangle yes
    (use-package lsp-mode
      :ensure t
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . efs/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
      :config
      ;; (lsp-enable-which-key-integration t)
  )

    (use-package lsp-ui
      :ensure t
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))



(use-package company
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle yes
  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src


*** Nix

#+begin_src emacs-lisp :tangle yes
  (use-package nix-mode
   :ensure t
   :mode "\\.nix\\'")

#+end_src
