* early-init.el
#+begin_src emacs-lisp :tangle early-init.el
;; -*- lexical-binding: t; no-byte-compile: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)
(setq package-enable-at-startup nil)
#+end_src

* init.el
;;; init.el ---  -*- lexical-binding: t; no-byte-compile: t -*-
#+begin_src emacs-lisp :tangle yes
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

** Startup
*** No welcome screen
#+begin_src emacs-lisp :tangle yes
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
;; (setq initial-scratch-message ";; Emacs Scratch buffer")
#+end_src

** use-package
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
(require 'use-package))

(eval-and-compile
  (defun use-package-ensure-ignore (&rest _args) t)
  (setq use-package-ensure-function #'use-package-ensure-ignore)

  ;; (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil))

(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))

#+end_src

** Visuals
*** Theme
#+begin_src emacs-lisp :tangle yes
(load-theme 'modus-vivendi-tritanopia)
#+end_src

** Keybindings
*** Evil
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :ensure t
  :demand t
  :commands (evil-mode evil-global-set-key)
  :config
  (evil-mode 1)

  (setq evil-want-fine-undo t)

  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; Keybindings for undo
  (define-key evil-normal-state-map "u" 'undo-tree-undo)
  (define-key evil-visual-state-map "u" 'undo-tree-undo)

  (define-key evil-insert-state-map (kbd "C-r") 'undo-tree-redo)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
  (define-key evil-visual-state-map (kbd "C-r") 'undo-tree-redo)
  (define-key evil-motion-state-map (kbd "C-r") 'undo-tree-redo)

  ;; Keybindings for evilnc
  (define-key evil-normal-state-map (kbd "g c") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-visual-state-map (kbd "g c") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-motion-state-map (kbd "g c") 'evilnc-comment-or-uncomment-lines)
  ;; (define-key evil-insert-state-map (kbd "gc") 'evilnc-comment-or-uncomment-lines) ;; insert mode
)
#+end_src

**** Undo Tree
=C-x u= for a undo tree view.
#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :ensure t
  :demand t
  :commands (global-undo-tree-mode)
  :config
  (global-undo-tree-mode)
)
#+end_src

**** Evil Commenter
#+begin_src emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :ensure t
  :after evil
  :commands (evilnc-default-hotkeys)
  :config
  (evilnc-default-hotkeys)
)
#+end_src


*** General keybindings
**** which-key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :ensure t)
#+end_src
**** Eval to kill ring
#+begin_src emacs-lisp :tangle yes
(defun eval-to-kill-ring ()
  (interactive)
  (kill-new (with-output-to-string (princ (call-interactively 'eval-expression)))))

(global-set-key (kbd "C-;") 'eval-to-kill-ring)
#+end_src


**** Clipboard
Custom elisp function for C-S-v pasting.
#+begin_src emacs-lisp :tangle yes
(setq select-enable-clipboard nil)

(defun preserve-clipboard (input-function)
  "Executes the function but preserves the clipboard."
  (let ((old-c (when (> (length kill-ring) 0) (car kill-ring))))
    (funcall input-function)
    (when old-c (kill-new old-c))))

(defun copy-to-clipboard ()
  "Copy the selected region to the clipboard."
  (interactive)
  (preserve-clipboard
   (lambda ()
     (setq select-enable-clipboard t)
     (kill-ring-save (region-beginning) (region-end))
     (setq select-enable-clipboard nil))))

(defun paste-from-clipboard ()
  "Paste from the clipboard."
  (interactive)
  (preserve-clipboard
   (lambda ()
     (setq select-enable-clipboard t)
     (yank)
     (setq select-enable-clipboard nil))))

(global-set-key (kbd "C-S-v") 'paste-from-clipboard)
(global-set-key (kbd "C-S-c") 'copy-to-clipboard)
#+end_src

** Completion
*** Company mode

#+begin_src emacs-lisp :tangle yes
(use-package company
  :ensure t
  :demand t
  :commands (global-company-mode)
  :config
  (global-company-mode 1)

  (add-to-list 'company-backends 'company-elisp)
  (add-to-list 'company-backends 'company-yasnippet)
  (add-to-list 'company-backends 'company-dabbrev-code)
  (add-to-list 'company-backends 'company-dabbrev)

  (setq company-begin-commands '(self-insert-command))
  (setq company-minimum-prefix-length 0
     company-idle-delay 0)
  (setq company-tooltip-align-annotations t)
  ;; no automatic word completion
  (setq company-insertion-triggers '())

  (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)

  (define-key company-active-map (kbd "<return>") 'company-complete-selection)
)
(use-package company-box
  :ensure t
  :demand t
  :hook (company-mode . company-box-mode))
#+end_src

** Ivy
#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :ensure t
  :demand t
  :commands (ivy-mode)
  :config
  (ivy-mode 1)

  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :ensure t
   :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x b" . counsel-switch-buffer)
         ("C-c f" . counsel-recentf))
)
#+end_src
** Org
*** No indentation 
#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure t
  :config
  (setq org-src-preserve-indentation nil
     org-edit-src-content-indentation 0)
  (setq org-ellipsis " ▾"
      org-hide-emphasis-markers t)
)


(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "DejaVu Sans Mono" :weight 'regular :height (cdr face)))


(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(require 'org-indent)

(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

** LSP
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :ensure t
  :commands lsp
  :hook
  (prog-mode . lsp)
)
#+end_src


* Keybingings
=M-:= eval-expression
